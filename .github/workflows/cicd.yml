## Create a new git repo for this code.
## Myy first task is to run Code on github actions

## First fetch the code form git repo.
## Then install docker inside it.
## Then run docker compose file.
## Wait for the response.
## If build was succesful try to run all the test cases.
## If all test passed then move forward
## SSh with ec2
## pull the code base or use the image from dockerhub
## create .env  file with github secret
## run docker-compose up
## Only Move to next step if previous step got succed

name: CICD

on: [push, workflow_dispatch]

jobs:
    setup-code-base:
        runs-on: ubuntu-latest
        steps:
            - name: Say Hello
              run: echo "Hello Ji"

            - name: Fetch Code from Github Repo
              uses: actions/checkout@v3

            - name: Set up Docker
              if: ${{ success() }}
              uses: docker/setup-buildx-action@v1

            - name: Install Docker Compose
              if: ${{ success() }}
              run: |
                  sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                  sudo chmod +x /usr/local/bin/docker-compose

            - name: Build and run Docker Compose
              if: ${{ success() }}
              env:
                  REDIS_PORT: ${{ secrets.REDIS_PORT }}
                  REDIS_HOST: ${{ secrets.REDIS_HOST }}
                  PORT: ${{ secrets.PORT }}
                  JWT_TOKEN_FOR_TESTING: ${{ secrets.JWT_TOKEN_FOR_TESTING }}
                  JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
                  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
                  AWS_REGION: ${{ secrets.AWS_REGION }}
                  MONGODB: ${{ secrets.MONGODB }}
                  TRANSPORTER_EMAIL: ${{ secrets.TRANSPORTER_EMAIL }}
                  TRANSPORTER_EMAIL_PASS: ${{ secrets.TRANSPORTER_EMAIL_PASS }}
                  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
              run: |

                  echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> env/backend.env
                  echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> env/backend.env
                  echo "PORT=${{ secrets.PORT }}" >> env/backend.env
                  echo "JWT_TOKEN_FOR_TESTING=${{ secrets.JWT_TOKEN_FOR_TESTING }}" >> env/backend.env
                  echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> env/backend.env
                  echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> env/backend.env
                  echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> env/backend.env
                  echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> env/backend.env
                  echo "MONGODB=${{ secrets.MONGODB }}" >> env/backend.env
                  echo "TRANSPORTER_EMAIL=${{ secrets.TRANSPORTER_EMAIL }}" >> env/backend.env
                  echo "TRANSPORTER_EMAIL_PASS=${{ secrets.TRANSPORTER_EMAIL_PASS }}" >> env/backend.env
                  echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> env/backend.env

                  docker-compose up -d

            - name: Install Node.js
              if: ${{ success() }}
              uses: actions/setup-node@v3

            - name: Set Enviroment variable to run all test cases
              run: |

                  echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> env/backend.env
                  echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> env/backend.env
                  echo "PORT=${{ secrets.PORT }}" >> env/backend.env
                  echo "JWT_TOKEN_FOR_TESTING=${{ secrets.JWT_TOKEN_FOR_TESTING }}" >> env/backend.env
                  echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> env/backend.env
                  echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> env/backend.env
                  echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> env/backend.env
                  echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> env/backend.env
                  echo "MONGODB=${{ secrets.MONGODB }}" >> env/backend.env
                  echo "TRANSPORTER_EMAIL=${{ secrets.TRANSPORTER_EMAIL }}" >> env/backend.env
                  echo "TRANSPORTER_EMAIL_PASS=${{ secrets.TRANSPORTER_EMAIL_PASS }}" >> env/backend.env
                  echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> env/backend.env

            - name: Installing Jest
              if: ${{ success() }}
              run: npm install jest supertest

            - name: Run all test cases
              if: ${{ success() }}
              run: npm test

            - name: executing remote ssh commands using password
              if: ${{ success() }}
              uses: appleboy/ssh-action@v0.1.10
              with:
                  host: ${{ secrets.EC2_NEW_NEW_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_NEW_NEW_PRIVATE_KEY }}
                  port: 22

                  script: |

                      sudo yum update -y
                      sudo yum install docker -y
                      sudo service docker start

                      sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                      sudo chmod +x /usr/local/bin/docker-compose
                      docker-compose --version

                      mkdir app
                      cd app

                      sudo yum install git -y
                      git version


                      git clone https://github.com/${{github.repository}}.git
                      repo_name=$(echo "${{ github.repository }}" | awk -F/ '{print $2}')
                      cd "$repo_name"
                      pwd

                      echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" > .env
                      echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
                      echo "PORT=${{ secrets.PORT }}" >> .env
                      echo "JWT_TOKEN_FOR_TESTING=${{ secrets.JWT_TOKEN_FOR_TESTING }}" >> .env
                      echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
                      echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
                      echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
                      echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
                      echo "MONGODB=${{ secrets.MONGODB }}" >> .env
                      echo "TRANSPORTER_EMAIL=${{ secrets.TRANSPORTER_EMAIL }}" >> .env
                      echo "TRANSPORTER_EMAIL_PASS=${{ secrets.TRANSPORTER_EMAIL_PASS }}" >> .env
                      echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env

                      sudo docker-compose up
